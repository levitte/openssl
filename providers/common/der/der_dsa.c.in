/*
 * Copyright 2020 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#include <openssl/bn.h>
#include <openssl/obj_mac.h>
#include "prov/der_dsa.h"

/* Well known OIDs precompiled */
{-
    $OUT = oids_to_c::process_leaves('providers/common/der/DSA.asn1',
                                     { dir => $config{sourcedir},
                                       filter => \&oids_to_c::filter_to_C });
-}

size_t DER_w_algorithmIdentifier_DSA(unsigned char **pp,
                                     const unsigned char *start,
                                     DSA *dsa)
{
    size_t a = 0;

    /* No parameters */
    CHECKED(a, DER_w_precompiled(pp, start, der_oid_id_dsa,
                                 sizeof(der_oid_id_dsa)));
    CHECKED(a, DER_w_sequence(pp, start, a));
    return a;
}

#define MD_CASE(name)                                                   \
    case NID_##name:                                                    \
        precompiled = der_oid_id_dsa_with_##name;                \
        precompiled_sz = sizeof(der_oid_id_dsa_with_##name);     \
        break;

size_t DER_w_algorithmIdentifier_DSA_with(unsigned char **pp,
                                          const unsigned char *start,
                                          DSA *dsa, int mdnid)
{
    const unsigned char *precompiled = NULL;
    size_t precompiled_sz = 0;
    size_t a = 0;

    switch (mdnid) {
        MD_CASE(sha1);
        MD_CASE(sha224);
        MD_CASE(sha256);
        MD_CASE(sha384);
        MD_CASE(sha512);
        MD_CASE(sha3_224);
        MD_CASE(sha3_256);
        MD_CASE(sha3_384);
        MD_CASE(sha3_512);
    default:
        return 0;
    }

    /* No parameters */
    CHECKED(a, DER_w_precompiled(pp, start, precompiled, precompiled_sz));
    CHECKED(a, DER_w_sequence(pp, start, (size_t)a));
    return a;
}
